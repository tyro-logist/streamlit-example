# -*- coding: utf-8 -*-
"""ONTARIO GREENHOUSE GAS EMISSIONS REPORTING BY FACILITY

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z3TEaBGciTEaiR1kjYPIo2YyG_RDrwrI

**bold text**##ONTARIO GREENHOUSE GAS EMISSIONS REPORTING BY FACILITY
"""
import streamlit
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import plotly.graph_objects as go

"""#About the data
The Ministry of the Environment, Conservation and Parks collects greenhouse gas
emissions data from regulated facilities under Ontario Regulation 390/18:
Greenhouse Gas Emissions: Quantification, Reporting and Verification using the
quantification methods in the incorporated Guideline for Quantification, Reporting
and Verification of Greenhouse Gas Emissions.
The emissions reports serve as a baseline for the ministry and interested parties
to understand emissions profiles and are a valuable tool for reporters to manage
and reduce their greenhouse gas emissions. For information on Ontarioâ€™s
Greenhouse Gas Reporting Program please visit our program webpage
https://www.ontario.ca/page/report-greenhouse-gas-ghg-emissions
"""

url = "https://raw.githubusercontent.com/tyro-logist/Ontario-GREENHOUSE-GAS-EMISSIONS-REPORTING-BY-FACILITY/main/GHG_Data_2010_2020_data_Dec162021.csv"

df = pd.read_csv(url, encoding = "ISO-8859-1")

# Check for missing values
missing_values = df.isnull().sum()
print(missing_values)

# Drop rows with missing values
df = df.dropna()

"""This code first imports the pandas library and then loads the data into a DataFrame using the read_csv() function. Next, it checks for missing values using the isnull() function, which returns a DataFrame of the same shape as the original DataFrame, but with True for missing values and False for non-missing values. The sum() function is then used to count the number of missing values in each column.

Then it drops the rows with missing values using dropna() function. This function removes any rows that contain at least one missing value.

You can also choose to drop only the columns with missing values by using df.dropna(axis=1) instead of df.dropna()
"""

df.head()

df.describe()

df.info()

df["Year"]=pd.to_datetime(df["Year"])

df.info()

df.columns

import matplotlib.pyplot as plt

plt.scatter(df['Total CO2e from all sources in CO2e (t)'], df['Reporting Amount in CO2e (t)'])

# Add axis labels
plt.xlabel('Carbon dioxide (CO2) from non-biomass in CO2e (t)')
plt.ylabel('Methane (CH4) in CO2e (t)')

# Show the plot
plt.show()

# Calculate the variance of each variable
variance = df.var()

# Print the variance of each variable
print(variance)

# Sort the variance in descending order
variance.sort_values(ascending=False, inplace=True)

# Print the variables with the highest variance
print(variance.head())

"""This will print the variance of each variable in the dataframe, and sort them in descending order. The variables with the highest variance will be at the top.

Another approach is to use the feature importance from tree-based models like Random Forest, XGBoost, etc. These models can rank the importance of features by looking at how much the tree nodes use them while splits.
"""



"""Group data by year and examine trends in emissions over time. """

# Group the data by year
grouped_data = df.groupby(['Year'])['Total CO2e from all sources in CO2e (t)'].sum()

# Print the total CO2e emissions for each year
print(grouped_data)

"""create a line plot of the total CO2e emissions over time, with year on the x-axis and total CO2e emissions on the y-axis. This can help you identify trends in emissions over time and also you can group the data by other variables to identify other trends as well."""

grouped_data.plot()
plt.xlabel('Year')
plt.ylabel('Total CO2e emissions')
plt.show()

import seaborn as sns

# Group the data by 'Facility Owner', 'Facility Name', and 'Facility City'
grouped_df = df.groupby(['Facility Owner', 'Facility Name', 'Facility City', 'Year'])['Total CO2e from all sources in CO2e (t)'].sum().reset_index()

# Create a line plot
sns.lineplot(x='Year', y='Total CO2e from all sources in CO2e (t)', hue='Facility City', data=grouped_df)

""" grouped_data = df.groupby(['Facility Name', 'Facility City']).sum().sort_values('Total CO2e from all sources in CO2e (t)', ascending=False).head(15)
#did not work as is
fig = go.Figure(data=[go.Bar(
            x=grouped_data.index.get_level_values('Facility City'),
            y=grouped_data['Total CO2e from all sources in CO2e (t)'],
            name='Facility Name',
            text=grouped_data.index.get_level_values('Facility Name'),
            hoverinfo='text',
            textposition='outside',
            marker=dict(
                color='rgb(158,202,225)',
                line=dict(
                    color='rgb(8,48,107)',
                    width=1.5),
            ),
            opacity=0.6,
            orientation='v',
            stacked=True
    )])

fig.update_layout(
    title='Facility CO2e emissions by City',
    xaxis=dict(title='Facility City'),
    yaxis=dict(title='Total CO2e from all sources in CO2e (t)'),
)
fig.show()***
"""

grouped_data = df.groupby(['Facility Name','Facility City']).sum().sort_values('Total CO2e from all sources in CO2e (t)', ascending=False).head(15)
fig = go.Figure(data=[go.Bar(
            x=grouped_data.index.get_level_values('Facility City'),
            y=grouped_data['Total CO2e from all sources in CO2e (t)'],
            name='Facility Name',
            text=grouped_data.index.get_level_values('Facility Name'),
            hoverinfo='text',
            textposition='outside',
            marker=dict(
                color='rgb(158,202,225)',
                line=dict(
                    color='rgb(8,48,107)',
                    width=1.5),
            ),
            opacity=0.6,
            orientation='v'
    )])

fig.update_layout(
    title='Facility CO2e emissions by City',
    xaxis=dict(title='Facility City'),
    yaxis=dict(title='Total CO2e from all sources in CO2e (t)'),
    barmode='stack'
)
fig.show()

g = sns.FacetGrid(grouped_df, col="Facility City", hue='Facility City')
g.map(sns.lineplot, "Year", "Total CO2e from all sources in CO2e (t)")
